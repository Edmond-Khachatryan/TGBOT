const TelegramBot = require('node-telegram-bot-api');
const config = require('./config');
const Logger = require('./logger');
const stats = require('./stats');

const bot = new TelegramBot(config.botToken, { polling: true });

Logger.success('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
function isAdmin(userId) {
    return config.admins.ids.includes(userId.toString()) || 
           userId.toString() === config.admins.channelOwnerId;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
bot.onText(/\/stats/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!isAdmin(userId)) {
        try {
            await bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
            Logger.warn(`–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            return;
        } catch (error) {
            Logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
            return;
        }
    }

    const statsData = stats.getStats();
    
    let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫*\n\n';
    message += `–í—Å–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–æ: ${statsData.total}\n`;
    message += `–°–µ–≥–æ–¥–Ω—è: ${statsData.today}\n`;
    message += `–ó–∞ –Ω–µ–¥–µ–ª—é: ${statsData.thisWeek}\n`;
    message += `–ó–∞ –º–µ—Å—è—Ü: ${statsData.thisMonth}\n\n`;
    
    message += '*–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n';
    statsData.topUsers.forEach((user, index) => {
        message += `${index + 1}. @${user.username}: ${user.count}\n`;
    });
    
    message += '\n*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:*\n';
    Object.entries(statsData.dailyStats).forEach(([date, count]) => {
        message += `${date}: ${count}\n`;
    });

    try {
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
        Logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
    }
});

bot.on('chat_join_request', async (msg) => {
    const { chat, from } = msg;

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
        if (config.joinRequests.rules.requireUsername && !from.username) {
            Logger.warn(`–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ç ${from.first_name} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username`);
            return;
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
        if (config.joinRequests.autoApprove) {
            await bot.approveChatJoinRequest(chat.id, from.id);
            const username = from.username || from.first_name;
            stats.addApprovedRequest(username, chat.title);
            Logger.success(`–û–¥–æ–±—Ä–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ç @${username} –≤ ${chat.title}`);
        }
    } catch (error) {
        Logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: ${error.message}`);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    Logger.error(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
});

process.on('unhandledRejection', (error) => {
    Logger.error(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${error.message}`);
});